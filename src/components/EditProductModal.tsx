'use client';
import { useState } from 'react';
import { supabase } from '@/lib/supabaseClient';

type Product = {
  id: string;
  name: string;
  sku?: string | null;
  cost_price?: number | null;
  sale_price?: number | null;
  qty?: number | null;
  category?: string | null;
  image_url?: string | null;
};

type Props = {
  open: boolean;
  onClose: () => void;
  product: Partial<Product>;
  onSaved: () => void;
};

export default function EditProductModal({ open, onClose, product, onSaved }: Props) {
  if (!open) return null;

  const [form, setForm] = useState<Product>({
    id: product.id!,
    name: product.name ?? '',
    sku: product.sku ?? '',
    cost_price: product.cost_price ?? 0,
    sale_price: product.sale_price ?? 0,
    qty: product.qty ?? 0,
    category: product.category ?? '',
    image_url: product.image_url ?? '',
  });
  const [busy, setBusy] = useState(false);

  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö qty ‡πÄ‡∏õ‡πá‡∏ô string ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ï‡∏•‡∏≠‡∏î
  const [qtyStr, setQtyStr] = useState<string>(String(product.qty ?? 0));

  // helper ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏ß‡πà‡∏≤‡∏á -> 0)
  const qtyNum = (() => {
    const n = parseInt(qtyStr, 10);
    return Number.isFinite(n) ? n : 0;
  })();

  async function save() {
    setBusy(true);
    try {
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏£‡∏¥‡∏á
      const oldQty = Number(product.qty ?? 0);
      const newQty = qtyNum;
      const delta = newQty - oldQty;

      if (delta !== 0) {
        const { data: s } = await supabase.auth.getSession();
        const uid = s?.session?.user?.id;
        if (!uid) throw new Error('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');

        const { error: mvErr } = await supabase.from('stock_movements').insert({
          product_id: form.id,
          change: delta,
          reason: 'ADJUST',
          created_by: uid,
          note: '‡πÅ‡∏Å‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
        });
        if (mvErr) throw mvErr;
      }

      const { error: upErr } = await supabase
        .from('products')
        .update({
          name: form.name,
          sku: form.sku || null,
          cost_price: Number(form.cost_price ?? 0),
          sale_price: Number(form.sale_price ?? 0),
          category: form.category || null,
          image_url: form.image_url || null,
          // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï qty ‡∏ï‡∏£‡∏á ‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ trigger ‡∏à‡∏≤‡∏Å movements ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß
        })
        .eq('id', form.id);

      if (upErr) throw upErr;

      onSaved();
      onClose();
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ');
    } catch (e: any) {
      alert(e.message || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setBusy(false);
    }
  }

  async function del() {
    if (!confirm(`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö "${form.name}" ?`)) return;
    setBusy(true);
    try {
      const { error } = await supabase.from('products').delete().eq('id', form.id);
      if (error) throw error;
      onSaved();
      onClose();
      alert('‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üóëÔ∏è');
    } catch (e: any) {
      alert(e.message || '‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setBusy(false);
    }
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (+1/-1) ‚Äî ‡πÉ‡∏ä‡πâ qtyStr ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏õ‡∏•‡∏á
  const bump = (v: number) => {
    const n = parseInt(qtyStr || '0', 10) || 0;
    setQtyStr(String(n + v));
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="w-full max-w-lg rounded-2xl bg-zinc-900 text-zinc-100 border border-zinc-800 shadow-xl p-5 space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-bold">üõ†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
          <button onClick={onClose} className="text-zinc-400 hover:text-white">‚úï</button>
        </div>

        {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <label className="block">
          <div className="text-sm text-zinc-400 mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
          <input
            className="w-full p-2 bg-zinc-800 rounded-lg border border-zinc-700 focus:ring-2 focus:ring-blue-500 outline-none"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />
        </label>

        {/* SKU + ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
        <div className="grid grid-cols-2 gap-3">
          <label className="block">
            <div className="text-sm text-zinc-400 mb-1">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (SKU/‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)</div>
            <input
              className="w-full p-2 bg-zinc-800 rounded-lg border border-zinc-700"
              value={form.sku ?? ''}
              onChange={(e) => setForm({ ...form, sku: e.target.value })}
            />
          </label>
          <label className="block">
            <div className="text-sm text-zinc-400 mb-1">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</div>
            <input
              className="w-full p-2 bg-zinc-800 rounded-lg border border-zinc-700"
              value={form.category ?? ''}
              onChange={(e) => setForm({ ...form, category: e.target.value })}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°/‡∏Ç‡∏ô‡∏°"
            />
          </label>
        </div>

        {/* ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô + ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ */}
        <div className="grid grid-cols-2 gap-3">
          <label className="block">
            <div className="text-sm text-zinc-400 mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô (‡∏ö‡∏≤‡∏ó)</div>
            <input
              type="number"
              className="w-full p-2 bg-zinc-800 rounded-lg border border-zinc-700"
              value={form.cost_price ?? 0}
              onChange={(e) => setForm({ ...form, cost_price: Number(e.target.value) })}
            />
          </label>
          <label className="block">
            <div className="text-sm text-zinc-400 mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)</div>
            <input
              type="number"
              className="w-full p-2 bg-zinc-800 rounded-lg border border-zinc-700"
              value={form.sale_price ?? 0}
              onChange={(e) => setForm({ ...form, sale_price: Number(e.target.value) })}
            />
          </label>
        </div>

        {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ + ‡∏õ‡∏∏‡πà‡∏° +1/-1 + ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà */}
        <label className="block">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm text-zinc-400">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ä‡∏¥‡πâ‡∏ô)</span>
            <span className="text-xs text-zinc-500">
              ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ <b>ADJUST</b> ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ï‡πá‡∏≠‡∏Å
            </span>
          </div>
          <div className="flex gap-2">
            <button
              className="px-3 rounded-lg bg-zinc-800 border border-zinc-700"
              onClick={() => bump(-1)}
              type="button"
            >
              ‚àí1
            </button>
            <input
              inputMode="numeric"            // üëç ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏õ‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
              pattern="[0-9]*"
              className="flex-1 p-2 bg-zinc-800 rounded-lg border border-zinc-700 text-right"
              value={qtyStr}
              onChange={(e) => {
                // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ, ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                const raw = e.target.value.replace(/[^\d]/g, '');
                setQtyStr(raw);
              }}
              placeholder="0"
            />
            <button
              className="px-3 rounded-lg bg-zinc-800 border border-zinc-700"
              onClick={() => bump(+1)}
              type="button"
            >
              +1
            </button>
          </div>
        </label>

        {/* URL ‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <label className="block">
          <div className="text-sm text-zinc-400 mb-1">‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
          <input
            className="w-full p-2 bg-zinc-800 rounded-lg border border-zinc-700 text-xs"
            value={form.image_url ?? ''}
            onChange={(e) => setForm({ ...form, image_url: e.target.value })}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô https://.../image.jpg"
          />
        </label>

        <div className="flex items-center justify-between pt-4 border-t border-zinc-800">
          <button className="px-4 py-2 text-zinc-400 hover:text-white" onClick={onClose}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
          <div className="flex gap-2">
            <button
              className="px-4 py-2 bg-red-600 hover:bg-red-500 rounded-lg"
              onClick={del}
              disabled={busy}
            >
              üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
            <button
              className="px-4 py-2 bg-blue-600 hover:bg-blue-500 rounded-lg"
              onClick={save}
              disabled={busy}
            >
              üíæ {busy ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‚Ä¶' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
